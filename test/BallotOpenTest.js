const BallotArchiveContract = artifacts.require('BallotArchive');
const BallotOpenContract = artifacts.require('BallotOpen');

// Archive-Node required as dependency given smart contract construction
contract('BallotOpen', function(accounts) {
    const zero_address = '0x0000000000000000000000000000000000000000';

    it('Deploy archive onto chain', async function(){
        const ballotArchiveContract = await BallotArchiveContract.deployed();
        assert(ballotArchiveContract.address !== '', "Expected non-null address on deployment, got \'\'");
    });

    it('Write and read singular OpenBallot', async function(){
        const ballotArchiveContract = await BallotArchiveContract.deployed();
        
        // Create new Ballot Contract
        _archiveAddress = ballotArchiveContract.address;
        _title = "My First Ballot";
        _metainfo = "Lorem Ipsum";
        _votingDays = 30;
        const ballotOpenContract = await BallotOpenContract.new(_archiveAddress, _title, _metainfo, _votingDays);

        // Read expected information from chain
        var storedTitle = await ballotOpenContract.title.call();
        assert(storedTitle === _title, "Stored Title was not equal given Title");

        var storedMetainfo = await ballotOpenContract.metainfo.call();
        assert(storedMetainfo === _metainfo, "Stored MetaInfo was not equal given MetaInfo");

        var storedStartTime = await ballotOpenContract.startTime.call();
        assert(storedStartTime !== 0, "Stored StartTime was Zero"); 

        var storedEndTime = await ballotOpenContract.endTime.call();
        assert(storedEndTime !== 0, "Stored EndTime was Zero");

        var storedTotalVotes = await ballotOpenContract.totalVotes.call();
        assert(storedTotalVotes == 0, "Stored TotalVotes was not zero");
        
        var storedProVotes = await ballotOpenContract.proVotes.call();
        assert(storedProVotes == 0, "Stored ProVotes was not zero");
    });
    it('Pass singular vote', async function(){
        const ballotArchiveContract = await BallotArchiveContract.deployed();
        
        // Create new Ballot and deploy to chain
        _archiveAddress = ballotArchiveContract.address;
        _title = "My First Ballot";
        _metainfo = "Lorem Ipsum";
        _votingDays = 30;
        const ballotOpenContract = await BallotOpenContract.new(_archiveAddress, _title, _metainfo, _votingDays);
        
        // Invoke vote
        var vote = await ballotOpenContract.vote(2);
        
        // Read expected voting information
        var storedTotalVotes = await ballotOpenContract.totalVotes.call();
        assert(storedTotalVotes == 1, "Stored TotalVotes was not one but instead " + storedTotalVotes);
        
        var storedProVotes = await ballotOpenContract.proVotes.call();
        assert(storedProVotes == 1, "Stored ProVotes was not one but instead " + storedProVotes);
    });
    
    it('Pass multiple votes, single voter (expected: revert)', async function(){
        const ballotArchiveContract = await BallotArchiveContract.deployed();
        
        // Create new Ballot and deploy to chain
        _archiveAddress = ballotArchiveContract.address;
        _title = "My First Ballot";
        _metainfo = "Lorem Ipsum";
        _votingDays = 30;
        const ballotOpenContract = await BallotOpenContract.new(_archiveAddress, _title, _metainfo, _votingDays);
        
        // Invoke double voting (forbidden)
        var vote1 = await ballotOpenContract.vote(1);
        try{
            var vote2 = await ballotOpenContract.vote(2);
        }catch(err){
            assert(err.message === 'Returned error: VM Exception while processing transaction: revert', "Received unexpected error message: \n\t" + err.message);
        }
    });
    
    
    it('Pass single votes, multiple voters', async function(){
        const ballotArchiveContract = await BallotArchiveContract.deployed();
        
        _archiveAddress = ballotArchiveContract.address;
        _title = "My First Ballot";
        _metainfo = "Lorem Ipsum";
        _votingDays = 30;
        const ballotOpenContract = await BallotOpenContract.new(_archiveAddress, _title, _metainfo, _votingDays);

        // Invoke multiple votes using different accounts
        var voter1 = accounts[1];
        var vote1 = await ballotOpenContract.vote(2, {from: voter1});

        var voter2 = accounts[2];
        var vote2 = await ballotOpenContract.vote(1, {from: voter2});

        var voter3 = accounts[3];
        var vote3 = await ballotOpenContract.vote(2, {from: voter3});

        // Read expected voting information
        var storedTotalVotes = await ballotOpenContract.totalVotes.call();
        assert(storedTotalVotes == 3, "Expected 3 stored total votes, got " + storedTotalVotes);

        var storedProVotes = await ballotOpenContract.proVotes.call();
        assert(storedProVotes == 2, "Expected 2 stored pro votes, got " + storedProVotes);
    });
    
});